version: "3"
services:
  nginx:
    build:
      context: ./env/nginx
      args:
        NGINX_VERSION: nginx:${NGINX_VERSION}
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        NGINX_INSTALL_APPS: ${NGINX_INSTALL_APPS}
    container_name: nginx
    ports:
      - "${NGINX_HTTP_HOST_PORT}:80"
      - "${NGINX_HTTPS_HOST_PORT}:443"
    volumes:
      - ${SOURCE_DIR}:/www/:rw
      - ${NGINX_SSL_CERTIFICATE_DIR}:/etc/nginx/ssl:rw
      - ${NGINX_REWRITE_DIR}:/etc/nginx/rewrite/:rw
      - ${NGINX_OTHER_DIR}:/etc/nginx/other/:rw
      - ${NGINX_VHOST_DIR}:/etc/nginx/vhost/:rw
      - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf:rw
      - ${NGINX_FASTCGI_PHP_CONF}:/etc/nginx/fastcgi-php.conf:rw
      - ${NGINX_FASTCGI_PARAMS}:/etc/nginx/fastcgi_params:rw
      - ${NGINX_DHPARAM_PARAMS}:/etc/nginx/dhparam.pem:rw
      - ${NGINX_LOG_DIR}:/var/log/nginx/:rw
      - ${NGINX_ACME_DIR}:/root/.acme.sh/:rw
    environment:
      TZ: "$TZ"
    restart: always
    networks:
      - default
  php80:
    build:
      context: ./env/php80
      args:
        PHP_VERSION: php:${PHP80_VERSION}-fpm-alpine3.13
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        PHP_EXTENSIONS: ${PHP80_EXTENSIONS}
        TZ: "$TZ"
    container_name: php80
    expose:
      - 9501
    volumes:
      - ${SOURCE_DIR}:/www/:rw
      - ${PHP80_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
      - ${PHP80_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
      - ${PHP80_LOG_DIR}:/var/log/php
      - ${DATA_DIR}/composer:/tmp/composer
    restart: always
    cap_add:
      - SYS_PTRACE
    networks:
      - default

  # mysql8.x 需要2g内存才可以安装。
  mysql80:
    image: mysql:${MYSQL80_VERSION}
    container_name: mysql80
    ports:
      - "${MYSQL80_HOST_PORT}:3306"
    volumes:
      - ${MYSQL80_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro
      - ${DATA_DIR}/mysql:/var/lib/mysql/:rw
      - ${MYSQL80_LOG_DIR}:/var/log/mysql/:rw
    restart: always
    networks:
      - default
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL80_ROOT_PASSWORD}"
      MYSQL_ROOT_HOST: "${MYSQL80_ROOT_HOST}"
      TZ: "$TZ"


  # mysql5.7 需要1g内存才可以安装。
  #  mysql57:
  #    image: mysql/mysql-server:${MYSQL5_VERSION}
  #    container_name: mysql5
  #    ports:
  #      - "${MYSQL5_HOST_PORT}:3306"
  #    volumes:
  #      - ${MYSQL5_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro
  #      - ${DATA_DIR}/mysql5:/var/lib/mysql/:rw
  #      - ${MYSQL5_LOG_DIR}:/var/log/mysql/:rw
  #    restart: always
  #    networks:
  #      - default
  #    environment:
  #      MYSQL_ROOT_PASSWORD: "${MYSQL5_ROOT_PASSWORD}"
  #      MYSQL_ROOT_HOST: "${MYSQL5_ROOT_HOST}"
  #      TZ: "$TZ"

  phpmyadmin:
    image: phpmyadmin
    container_name: xii-phpmyadmin
    ports:
      - "${PHPMYADMIN_HOST_PORT}:80"
    volumes:
      - ${PHPMYADMIN_USER_CONF_FILE}:/etc/phpmyadmin/config.user.inc.php:ro
      - ${PHPMYADMIN_PHP_CONF_FILE}:/usr/local/etc/php/conf.d/php-phpmyadmin.ini:ro
    networks:
      - default
    environment:
      - PMA_HOST=mysql80
      - PMA_PORT=3306
      #      - PMA_ARBITRARY=1
      - TZ=$TZ


#  # Redis安装
#  redis:
#    image: redis:${REDIS_VERSION}
#    container_name: redis
#    ports:
#      - "${REDIS_HOST_PORT}:6379"
#    volumes:
#      - ${REDIS_CONF_FILE}:/etc/redis.conf:ro
#      - ${DATA_DIR}/redis:/data/:rw
#    restart: always
#    entrypoint: [ "redis-server", "/etc/redis.conf" ]
#    environment:
#      TZ: "$TZ"
#    networks:
#      - default


#  supervisor:
#    build:
#      context: ./env/supervisor
#      args:
#        ALPINE_VERSION: alpine:${ALPINE_VERSION}
#        TZ: "$TZ"
#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
#    container_name: supervisor
#    ports:
#      - "${SUPERVISOR_HOST_PORT_C}:9001"
#    volumes:
#      - ${SOURCE_DIR}:/www/:rw
#      - ${SUPERVISOR_LOG}:/var/log/supervisor/:rw
#      - ${SUPERVISOR_CONFIG}:/etc/supervisor/conf.d/:rw
#      - ${SUPERVISOR_CONF_FILE}:/etc/supervisor/supervisord.conf:ro
#    command:
#      - /bin/sh
#      - -c
#      - |
#        supervisord -n -c /etc/supervisor/supervisord.conf
#    restart: always
#    cap_add:
#      - SYS_PTRACE
#    networks:
#      - default

#  mongodb:
#    image: mongo:${MONGODB_VERSION}
#    container_name: mongodb
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: "${MONGODB_INITDB_ROOT_USERNAME}"
#      MONGO_INITDB_ROOT_PASSWORD: "${MONGODB_INITDB_ROOT_PASSWORD}"
#      TZ: "$TZ"
#    volumes:
#      - ${DATA_DIR}/mongo:/data/db:rw
#      - ${DATA_DIR}/mongo_key:/mongo:rw
#    ports:
#      - "${MONGODB_HOST_PORT}:27017"
#    networks:
#      - default
#    command:
#      --auth

#  node:
#    image: node:${NODE_VERSION}
#    environment:
#      - NODE_ENV=production
#    volumes:
#      - ${SOURCE_DIR}:/www/:rw
#    expose:
#      - "8081"
#    networks:
#      - default
#    stdin_open: true
#    # 解决 docker-compose.yml 启动容器秒停 出错停止问题，加tty:true
#    tty: true
#
#  # 提供一个go环境而已，用于开发？交叉编译等
#  # 一般如果是golang写出来的程序，是自己写的dockerfile，然后自己编译，然后运行。
#  go:
#    image: golang:${GO_VERSION}
#    volumes:
#      - ${SOURCE_DIR}:/www/:rw
#    expose:
#      - "8082"
#    networks:
#      - default
#    stdin_open: true
#    # 解决 docker-compose.yml 启动容器秒停 出错停止问题，加tty:true
#    tty: true

# ELK环境，于我暂时没有用处，不理才是幸福
# 留着配置的原因很简单，就是希望有一天能给个小助手，自动选择组合
#
#  elasticsearch:
#    build:
#      context: ./env/elasticsearch
#      args:
#        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
#        ELASTICSEARCH_PLUGINS: ${ELASTICSEARCH_PLUGINS}
#    container_name: elasticsearch
#    environment:
#      - TZ=$TZ
#      - discovery.type=single-node
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    volumes:
#      - ${DATA_DIR}/esdata:/usr/share/elasticsearch/data
#      - ${ELASTICSEARCH_CONF_FILE}:/usr/share/elasticsearch/config/elasticsearch.yml
#    hostname: elasticsearch
#    restart: always
#    ports:
#      - "${ELASTICSEARCH_HOST_PORT_C}:9200"
#      - "${ELASTICSEARCH_HOST_PORT_S}:9300"

#  kibana:
#    image: kibana:${KIBANA_VERSION}
#    container_name: kibana
#    environment:
#      TZ: "$TZ"
#      elasticsearch.hosts: http://elasticsearch:9200
#      I18N_LOCALE: "${KIBANA_I18N_LOCALE}"
#    hostname: kibana
#    depends_on:
#      - elasticsearch
#    restart: always
#    ports:
#      - "${KIBANA_HOST}:5601"

#  logstash:
#    image: logstash:${LOGSTASH_VERSION}
#    container_name: logstash
#    hostname: logstash
#    restart: always
#    depends_on:
#      - elasticsearch
#    environment:
#      TZ: "$TZ"
#    ports:
#      - "${LOGSTASH_HOST_PORT_C}:9600"
#      - "${LOGSTASH_HOST_PORT_S}:5044"

networks:
  default:
    driver: bridge
    ipam:
      driver: default
      # 解除下面的注释可以设置网段，用于nginx等容器固定容器IP
      #config:
      #  - subnet: 10.0.0.0/24
